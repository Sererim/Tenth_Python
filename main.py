from homework import Circle
from homework import Rectangle
from homework import Person
from homework import Fish
from homework import Being
from homework import ATM


# Создайте класс окружность.
#     Класс должен принимать радиус окружности при создании
#     экземпляра.
#     У класса должно быть два метода, возвращающие длину
#     окружности и её площадь.

round = Circle(10)
print(f"Area is: {round.area()}.\nCircumference is: round.circumference()")

# Создайте класс прямоугольник.
#     Класс должен принимать длину и ширину при создании
#     экземпляра.
#     У класса должно быть два метода, возвращающие периметр
#     и площадь.
#     Если при создании экземпляра передаётся только одна
#     сторона, считаем что у нас квадрат.

rect = Rectangle(10, 2)
square = Rectangle(10)

print(f"{square.area()} = ")
print(f"{rect.area()} = ")

# Напишите класс для хранения информации о человеке:
#     ФИО, возраст и т.п. на ваш выбор.
#     У класса должны быть методы birthday для увеличения
#     возраста на год, full_name для вывода полного ФИО и т.п. на
#     ваш выбор.
#     Убедитесь, что свойство возраст недоступно для прямого
#     изменения, но есть возможность получить текущий возраст.

woman = Person("Ciri", "Fiona Elen Riannon", "var Emreis ", 20)
print(woman.full_name())
print(woman.get_age())
woman.birthday()
print(woman.get_age())
# print(woman.__age) AttributeError: 'Person' object has no attribute '__age'

# Создайте три (или более) отдельных классов животных.
#     Например рыбы, птицы и т.п.
#     У каждого класса должны быть как общие свойства,
#     например имя, так и специфичные для класса.
#     Для каждого класса создайте метод, выводящий
#     информацию специфичную для данного класса.
# Доработайте задачу.
#     Вынесите общие свойства и методы классов в класс
#     Животное.
#     Остальные классы наследуйте от него.
#     Убедитесь, что в созданные ранее классы внесены правки.

shark = Fish("Whale shark", "Bluuuub-Bloob", 0)
print(shark.name_is())
print(f"{shark.has_legs()}")
print(f"{shark.swims()}")
print(f"{shark.says()}")

# Доработаем задания 5-6. Создайте класс-фабрику.
#  Класс принимает тип животного (название одного из созданных классов) и параметры для этого типа.
#  Внутри класса создайте экземпляр на основе переданного типа и верните его из класса-фабрики.

snek = Being(name="Sea snake", say="blubbl-sssss", legs=0, type="Snek").factory()
snek.is_poisonous(True)

print(f"{snek.name_is() = }\n{snek.poisonous() = }\n{snek.has_legs() = }")

# Возьмите 1-3 любые задания из прошлых семинаров (например сериализация данных), которые вы уже решали. 
# Превратите функции в методы класса, а параметры в свойства. 
# Задания должны решаться через вызов методов экземпляра.

atm = ATM()
atm.core()
